go
// searchRange 二分法
func searchRange(nums []int, target int) []int {
	count := len(nums)
	if count == 0 {
		return []int{-1, -1}
	}
	first := findFirstPosition(nums, target)
	if first == -1 {
		return []int{-1, -1}
	}
	last := findLastPosition(nums, target)

	return []int{first, last}
}

// findFirstPosition 查找开始的位置
func findFirstPosition(nums []int, target int) int {
	left := 0
	right := len(nums) - 1

	for left < right {
		mid := (left + right) / 2

		if nums[mid] < target {
			left = mid + 1
		} else if nums[mid] == target {
			// 此时 mid 虽然等于 target，但是 mid 左边可能还有相同的元素
			right = mid
		} else {
			right = mid - 1
		}
	}

	if nums[left] == target {
		return left
	}
	return -1
}

// findLastPosition 查找最后的位置
func findLastPosition(nums []int, target int) int {
	left := 0
	right := len(nums) - 1

	for left < right {
		// 假设在只有 2 个数的情况下，要 +1
		mid := (left + right + 1) / 2

		if nums[mid] < target {
			left = mid + 1
		} else if nums[mid] == target {
			left = mid
		} else {
			right = mid - 1
		}
	}

	return left
}


