java
class Solution {
    //[c-1] 题解：有序数组-->二分法
    //找到第一个==target的
    //找到第一个大于 target的位置 -1就是最后一个位置
    public int[] searchRange(int[] nums, int target) {
        int a=binaryGetTarget(nums,target);
        int b=binaryGetGreaterT(nums,target);
        if(a==-1 || b==-1){
            return new int[]{-1,-1};
        }else return new int[]{a,b};


    }
   /**
     * 该函数其实是返回了比target小的数字的个数
     * 所以如果等于len，或者 nums[l]!=t 则说明没有找到目标元素
     * @param nums
     * @param t
     * @return
     */
    int binaryGetTarget(int[] nums,int t){
        int l=0,r=nums.length-1,mid=0;
        while(l<=r){
            mid=(l+r)>>>1;
            if(nums[mid]==t){
                r=mid-1;//向左缩减空间
            }
            if(nums[mid]<t){
                l=mid+1;
            }else if(nums[mid]>t){
                r=mid-1;
            }
        }
        if(l==nums.length || nums[l]!=t) return -1;
        return l;
    }

    /**
     * 该函数其实是返回了比target大的第一个数字 的下标
     * 
     * @param nums
     * @param t
     * @return
     */
    int binaryGetGreaterT(int[] nums,int t){
        int l=0,r=nums.length-1,mid=0;
        while(l<=r){
            mid=(l+r)>>>1;
            if(nums[mid]==t){
                l=mid+1;//向右缩减空间
            }
            if(nums[mid]<t){
                l=mid+1;
            }else if(nums[mid]>t){
                r=mid-1;
            }
        }
        if(r<0 || nums[r]!=t) return -1;
        return r;
    }
}

