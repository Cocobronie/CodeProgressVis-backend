cpp
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        if(nums.empty()) return vector<int> {-1, -1};
        int lower = lower_bound(nums, target);
        int upper = upper_bound(nums, target) - 1;
        if(lower == nums.size() || nums[lower] != target) return vector<int> {-1, -1};
        return vector<int> {lower, upper};
    }
    int lower_bound(vector<int>& nums, int target)
    {
        int left = 0, right = nums.size(), mid;
        while(left < right) {
            mid = (left + right) / 2;
            if(nums[mid] >= target) {
                right = mid;
            }
            else {
                left = mid + 1;
            }
        }
        return left;
    }
    int upper_bound(vector<int>& nums, int target)
    {
        int left = 0, right = nums.size(), mid;
        while(left < right) {
            mid = (left + right) / 2;
            if(nums[mid] > target) {
                right = mid;
            }
            else {
                left = mid + 1;
            }
        }
        return left;
    }
};

