
    public int[] searchRange(int[] nums, int target) {
        int length = nums.length;
        int left = -1;
        int right = -1;
        if (length > 0) {
            int position = binarySearch(nums, target);
            if (position > -1) {
                left = position;
                right = position;
                while (left - 1 > 0 && nums[left - 1] == target) {
                    left--;
                }
                while (right + 1 < length && nums[right + 1] == target) {
                    right++;
                }
            }
        }
        return new int[]{left, right};
    }

    private int binarySearch(int[] nums, int target) {
        int low = 0;
        int high = nums.length - 1;
        int position = -1;
        if (nums[low] <= target) {
            if (nums[low] == target) {
                position = low;
            }
            if (position == -1 && nums[high] >= target) {
                if (nums[high] == target) {
                    position = high;
                }
                while (position == -1 && low <= high) {
                    int tmp = (high + low) / 2;
                    if (nums[tmp] == target) {
                        position = tmp;
                    } else {
                        if (nums[tmp] > target) {
                            high = tmp - 1;
                        } else {
                            low = tmp + 1;
                        }
                    }
                }
            }
        }

        return position;
    }

