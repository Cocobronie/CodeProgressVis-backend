cpp
class Solution {
public:
    ////< @note 寻找target的左边界
    int leftBound(vector<int> &nums, int target) {
        int left = 0, right = nums.size()-1;
        while (left <= right) {
            int mid = left + (right-left)/2;
            if (nums[mid] == target) {
                right = mid - 1;
            } else if (nums[mid] < target) {
                left = mid + 1;
            } else if (nums[mid] > target) {
                right = mid - 1;
            }
        }
        /*
         * 当target小于nums中所有值时，left=0, right=-1
         * 当target大于nums中所有值时，left=nums.size(), right=nums.size()-1
         * 当target处于nums的最大值和最小值之间，但没有相等值，就需要第二个判断*/
        if (left >= nums.size() || nums[left] != target) {
            return -1;
        }
        return left;
    }

    ////< @note 寻找target的右边界
    int rightBound(vector<int> &nums, int target) {
        int left = 0, right = nums.size()-1;
        while (left <= right) {
            int mid = left + (right-left)/2;
            if (nums[mid] == target) {
                left = mid + 1;
            } else if (nums[mid] > target) {
                right = mid - 1;
            } else if (nums[mid] < target) {
                left = mid + 1;
            }
        }
        if (right < 0 || nums[right] != target) {
            return -1;
        }
        return right;
    }

    vector<int> searchRange(vector<int>& nums, int target) {
        int left = leftBound(nums, target);
        int right = rightBound(nums, target);
        return {left, right};
    }
};

