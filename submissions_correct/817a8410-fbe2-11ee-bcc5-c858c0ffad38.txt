cpp
class Solution {
public:
    int divide1(vector<int>&nums,int target){
        //left right 左右边界
        int left = 0;
        int right = nums.size() - 1;
        int mid;
        //ans直接设为初始值-1 因为最后返回ans 即使没找到也是返回正确值-1
        int ans = -1;
        while(left<=right){
            mid = (left + right) / 2;
            //小于的话 left = mid+1
            if(nums[mid] < target){
                left = mid + 1;
            //大于的话 right缩为mid
            }else if(nums[mid] > target){
                right = mid;
            }else{
                //如果找到了 那么更新找到的位置 
                ans = mid;
                //同时继续往前找 因为是向前找 所以缩小right为mid-1
                right = mid - 1;
            }
            //这里是个坑 如果不注意 会死循环
            if(nums[mid]>target && left==right)
                break;
        }
        return ans;
    }
    //divide2就是divide1的向后继续查找版本
    int divide2(vector<int>&nums,int target){
        int left = 0;
        int right = nums.size() - 1;
        int mid;
        int ans = -1;
        while(left<=right){
            mid = (left + right) / 2;
            if(nums[mid] < target){
                left = mid + 1;
            }else if(nums[mid] > target){
                right = mid;
            }else{
                //如果找到了 那么更新找到的位置 
                ans = mid;
                //同时继续往前找 因为是向前找 所以缩小right为mid-1
                left = mid + 1;
            }
            if(nums[mid]>target && left==right)
                break;
        }
        return ans;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        //找到左端点
        int left = divide1(nums,target);
        //找到右端点
        int right = divide2(nums,target);
        //返回左右端点 直接{}即可
        return {left,right};
    }
};

