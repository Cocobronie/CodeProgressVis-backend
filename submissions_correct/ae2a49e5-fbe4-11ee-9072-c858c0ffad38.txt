cpp
class Solution {
public:

    int binarySearch(vector<int>& nums, int start, int end, int target) {
        
        while (start <= end) {
            int mid = start + (end - start) / 2;
            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] < target) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
        return -1;
    }

    vector<int> searchRange(vector<int>& nums, int target) {
        int mid = binarySearch(nums, 0, nums.size() - 1, target);
        if (mid == -1) return {-1, -1};

        int left = mid, right = mid;
        while (true) {
            int tmp = binarySearch(nums, 0, left - 1, target);
            if (tmp == -1) {
                break;
            } else {
                left = tmp;
            }
        }
        while (true) {
            int tmp = binarySearch(nums, right + 1, nums.size() - 1, target);
            if (tmp == -1) {
                break;
            } else {
                right = tmp;
            }
        }
        return {left, right};
    }

};

