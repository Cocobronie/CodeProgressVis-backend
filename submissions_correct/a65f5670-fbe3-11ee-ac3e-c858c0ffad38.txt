cpp
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> res;
        for(int i = 0; i< nums.size(); i++){
            if(nums[i] == target)
            res.push_back(i);
            else if(nums[i] < target)
            continue;
            else
            break;
        }
        if(res.size() == 0)
        return {-1,-1};
        if(res.size() == 1)
        return {res[0], res[0]};

        vector<int> ans;
        ans.push_back(res[0]);
        ans.push_back(res[res.size()-1]);
        return ans;
    }
};



#### 法2
二分法，我们要找的leftIndex其实就是第一个大于等于target的位置，要找rightIndex其实是第一个大于target的位置减一，这里leftIndex要大于等于target，其实是二分法本来的性质
##### 代码


cpp
int BinarySearch(int target, vector<int> nums, bool flag){
    int left = 0;
    int right = nums.size()-1;
    int ans = (int)nums.size();
    while(left <= right){
        int mid = (left+right) / 2;
        if(nums[mid] > target || (flag && nums[mid] >= target)){
            right = mid-1;
            ans = mid;
        }
        else
        left = mid+1;
    }
    return ans;
}

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int leftIndex = BinarySearch(target, nums, true);  // 第一个大于等于target的数字位置
        int rightIndex = BinarySearch(target, nums, false)-1;  // 第一个大于target的数字位置-1
        if(leftIndex <= rightIndex && rightIndex < nums.size() && nums[leftIndex] == target && nums[rightIndex]==target)
        return vector<int>{leftIndex, rightIndex};
        else
        return {-1,-1};
    }
};

