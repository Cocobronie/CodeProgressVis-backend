java
class Solution {
    public int[] searchRange(int[] nums, int target) {    
           if (nums.length == 0) return new int[]{-1, -1};
        return new int[]{searchLeft(nums, target), serchRight(nums, target)};
    }

    private static int serchRight(int[] nums, int target) {
        int n = nums.length, l = 0, r = n - 1;
        while (l <= r) {
            int mid = l + ((r - l) >> 1);
            if (nums[mid] == target && (mid + 1 == n || nums[mid + 1] != target)) {
                return mid;
            }
            if (nums[mid] > target) r = mid - 1;
            else l = mid + 1;
        }
        return -1;
    }

    private static int searchLeft(int[] nums, int target) {
        int n = nums.length, l = 0, r = n - 1;
        while (l <= r) {
            int mid = l + ((r - l) >> 1);
            if (nums[mid] == target && (mid == 0 || nums[mid - 1] != target))
                return mid;
            if (nums[mid] < target)
                l = mid + 1;
            else r = mid - 1;
        }
        return -1;
    }
}

