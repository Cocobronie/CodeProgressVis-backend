cpp
class Solution {
public:

//      int binarySearch(const vector<int>& nums, int target)
//      {
//          //定义 要寻找的边界在 区间 (left,right]
//          int left=-1,right=nums.size()-1;
//          while(left< right)
//          {
//                int mid= left + (right-left)/2;
//                int midVal= nums[mid];
//                if(midVal < target && nums[mid+1]== target) return mid+1;
//                else if (midVal< target ) left= mid+1;
//                else  right = mid-1;
//          }
//          return -1;
//      }

//           int binarySearch2(const vector<int>& nums, int target)
//      {
//          //定义 要寻找的边界在 区间 [left,right)
//          int left=0,right=nums.size();
//          while(left< right)
//          {
//                int mid= left + (right-left)/2;
//                int midVal= nums[mid];
//                if(midVal > target && nums[mid-1]== target) return mid-1;
//                else if (midVal> target ) right= mid-1;
//                else  left = mid+1;
//          }
//          return -1;
//      }
//     vector<int> searchRange(vector<int>& nums, int target) {

// //       //使用std::lower_bound 时候 如果不存在 也不会返回data.end()
// //       auto lower = std::lower_bound(data.begin(), data.end(), target);
// //     auto upper = std::upper_bound(data.begin(), data.end(), target);
// //     if(lower ==data.end() ) return {-1 ,-1};
// //    // std::copy(lower, upper, std::ostream_iterator<int>(std::cout, " "));
// //   // std::cout<< std::distance(data.begin(), upper);
// //  return  {(int) std::distance(data.begin(), lower) ,-1+ (int)std::distance(data.begin(), upper) };

//       // see 704 binary serach ,不同之处是元素能够重复
//     //   nums = [5,7,7,8,8,10], target = 8
//     //   根据大小关系 将数组转化为 -1 -1 -1 0 0 1
//     //   定义左边界 是 -1 0 ,右边界是 0 1
       
      
// //std::cout<< binarySearch2(nums,target);
// return {binarySearch(nums,target),   binarySearch2(nums,target)};
   
//     }

int binarySearch(vector<int>& nums, int target, bool lower) {
        int left = 0, right = (int)nums.size() - 1, ans = (int)nums.size();

        while (left <= right) {

            int mid = (left + right) / 2;
            //思路：直接找大于target的边界 
            if (nums[mid] > target || (lower && nums[mid] >= target)) {
                right = mid - 1;
                ans = mid;
            } else {
                left = mid + 1;
            }

        }
        return ans;
    }

    vector<int> searchRange(vector<int>& nums, int target) {
        int leftIdx = binarySearch(nums, target, true);
        int rightIdx = binarySearch(nums, target, false) - 1;
        if (leftIdx <= rightIdx && rightIdx < nums.size() && nums[leftIdx] == target && nums[rightIdx] == target) {
            return vector<int>{leftIdx, rightIdx};
        } 
        return vector<int>{-1, -1};
    }
  


};

