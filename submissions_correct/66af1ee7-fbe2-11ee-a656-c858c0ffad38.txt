java
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] arr = new int[]{-1, -1};
        if(nums.length == 0 || nums == null) return arr;
        //因为是升序数组，所以若数组值范围内没有目标值，直接返回 [-1,-1]
        if (nums[0] > target || nums[nums.length - 1] < target) return arr;
        //求最左值索引
        arr[0] = left(nums, target);
        // -1 说明数组里就没有目标值，直接返回 [-1,-1]
        if (arr[0] == -1) return arr;
        ////求最右值索引   
        arr[1] = right(nums, target);
        return arr;
    }

    public int left(int[] nums, int target) {
        int l = 0;
        int r = nums.length - 1;
        int m = -1;
        while (l <= r) {
            m = l + (r - l) / 2;
            //当找到值是继续往左区域搜索，当跳出时，r < l，此时的 l 就是最左值索引
            if (nums[m] >= target) r = m - 1;
            else if (nums[m] < target) l = m + 1;
        }
        //若跳出循环时的 l 索引所在的值与目标值不同，说明数组里没有目标值，返回 -1
        if (nums[l] != target) return -1;

        return l;
    }

    public int right(int[] nums, int target) {
        int l = 0;
        int r = nums.length - 1;
        int m = -1;
        while (l <= r) {
            m = l + (r - l) / 2;
            //当找到值是继续往右区域搜索，当跳出时，r < l，此时的 r 就是最右值索引
            if (nums[m] <= target) l = m + 1;
            else if (nums[m] > target) r = m - 1;
        }
        //这里不用了，如果找最左值索引时就没有找到，那最右也肯定找不到，直接返回 -1
        //if (nums[r] != target) return -1;

        return r;
    }
}





### 方法二：暴力法
超时！！！
先找到第一个为目标值的位置，然后左右区域线性搜索


### 代码


java

class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] arr = new int[]{-1, -1};
        if (nums.length == 0 || nums == null) return arr;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == target) {
				//若左边不为目标值，或者当前位置是数组开头
                if (i - 1 > -1 && nums[i - 1] != target || i - 1 == -1) arr[0] = i;
				//若右边不为目标值，或者当前位置是数组尾部
                if (i + 1 < nums.length && nums[i + 1] != target || i + 1 >= nums.length) arr[1] = i;
            }
        }

        return arr;
    }
}


