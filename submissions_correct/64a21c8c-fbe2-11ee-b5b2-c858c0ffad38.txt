java
class Solution {
    public int[] searchRange(int[] nums, int target) {
      int left = 0;
      int right = nums.length - 1;
      int leftLimit = Integer.MAX_VALUE;;
      int rightLimit = Integer.MIN_VALUE;
      while(left <= right) {
          int mid = left + (right - left) / 2;
          if (nums[mid] == target) {
              leftLimit = Math.min(leftLimit, mid);
              right = mid - 1;
          } else if (nums[mid] < target) {
              left = mid + 1;
          } else {
              right = mid - 1;
          }
      }
      left = 0;
      right = nums.length - 1;
      while(left <= right) {
          int mid = left + (right - left)/2;
          if (nums[mid] == target) {
              rightLimit = Math.max(mid, rightLimit);
              left = mid + 1;
          } else if (nums[mid] < target) {
              left = mid + 1;
          } else {
              right = mid - 1;
          }
      }
      int[] ret = new int[2];
      ret[0] = -1;
      ret[1] = -1;
      if (leftLimit <= rightLimit) {
          ret[0] = leftLimit;
          ret[1] = rightLimit;
      }
      return ret; 
    }

    private int binarySearch(int[] nums, int l, int r, int target) {
      while(l <= r) {
          int mid = l + (r - l)/2;
          if (nums[mid] == target) {
              return mid;
          } else if (nums[mid] < target) {
              l = mid + 1;
          } else {
              r = mid - 1;
          }
      }
      return -1;
    }
}

