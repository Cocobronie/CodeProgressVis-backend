
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] ans = {-1,-1};
        if(nums == null || nums.length == 0){
            return ans;
        }
        return new int[] {findLeft(nums, target), findRight(nums, target)};
    }    
    
    private int findLeft(int[] nums, int target){
        int len = nums.length; 
        //left index
        int l =0, r = len - 1;
        while(l <= r){
                int mid = l + (r - l) / 2;
                if(nums[mid] == target){
                    r = mid - 1;
                }
                else if(nums[mid] < target){
                    l = mid + 1;
                }
                else if(nums[mid] > target){
                    r = mid - 1;
                }
            }
        if(l >=nums.length || nums[l] != target)
            return -1;
        return l;
    }
    

    private int findRight(int[] nums, int target){
        //right index
        int len = nums.length;
        int l_2 = 0, r_2 = len - 1;
        while(l_2 <= r_2){
                int mid_2 = l_2 + (r_2 - l_2) / 2;
                if(nums[mid_2] == target){
                    l_2 = mid_2 + 1;
                }
                else if(nums[mid_2] < target){
                    l_2 = mid_2 + 1;
                }
                else if(nums[mid_2] > target){
                    r_2 = mid_2 - 1;
                }
            }
        if(r_2 < 0 || nums[r_2] != target)
            return -1;
        return r_2; 
    }

}

