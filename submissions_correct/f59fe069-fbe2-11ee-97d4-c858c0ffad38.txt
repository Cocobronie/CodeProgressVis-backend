java
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] result = new int[2];
        result[0] = searchLeftRange(nums, target);
        result[1] = searchRightRange(nums, target);
        return result[0] <= result[1] ? result : new int[]{-1, -1};
    }

    private int searchLeftRange(int[] nums, int target) {
        int n = nums.length;
        int left = 0;
        int right = n - 1;
        int mid;
        while (left <= right) {
            mid = left + ((right - left) >> 1);
            if (nums[mid] >= target) {
                right = mid - 1;
            } else if (nums[mid] < target) {
                left = mid + 1;
            }
        }
        return left;
    }

    private int searchRightRange(int[] nums, int target) {
        int n = nums.length;
        int left = 0;
        int right = n - 1;
        int mid;
        while (left <= right) {
            mid = left + ((right - left) >> 1);
            if (nums[mid] > target) {
                right = mid - 1;
            } else if (nums[mid] <= target) {
                left = mid + 1;
            }
        }
        return right;
    }
}

