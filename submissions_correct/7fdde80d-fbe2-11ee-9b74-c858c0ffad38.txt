
while(L<R)
{
	mid=(L+R)/2;
		if(满足条件)//肯定是查找的值大于目标值（可能等于，但绝不会小于）
		{
			R=mid;
		}else
		{
			L=mid+1;
		}
}



②L=mid


while(L<R)
{
	mid=(L+R+1)/2;
		if(满足条件)//肯定是查找的值小于目标值（可能等于，但绝不会大于）
		{
			L=mid;
		}else
		{
			R=mid-1;
		}
}




### 代码


java
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] result=new int[]{-1,-1};
        if(nums.length==0){
            return result;
        }
        int L=0,R=nums.length,ans1,ans2;
        //左闭右开
        //寻找lower
        while(L<R){
            int mid=(L+R)/2;
            if(nums[mid]>=target){
                R=mid;
            }else{
                L=mid+1;
            }
        }
        ans1=L;

        //寻找upper
        L=0;
        R=nums.length;
        while(L<R){
            int mid=(L+R)/2;
            if(nums[mid]>target){
                R=mid;
            }else{
                L=mid+1;
            }
        }
        ans2=L-1;

        if(!(ans1==nums.length || nums[ans1]!=target)){
            result[0]=ans1;
            result[1]=ans2;
        }
        return result;
    }


    //暴力解法
    /*public int[] searchRange(int[] nums, int target) {
        int[] result=new int[]{-1,-1};
        if(nums.length==0){
            return result;
        }
        for(int i=0;i<nums.length;i++){
            if(nums[i]==target){
                if(result[0]==-1){
                    result[0]=i;
                    result[1]=i;
                }else{
                    result[1]=i;    
                }
            }
            
        }
        return result;
    }*/
}

