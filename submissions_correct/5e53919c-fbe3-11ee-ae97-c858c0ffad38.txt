
class Solution {
        public int[] searchRange(int[] nums, int target) {
                int len = nums.length;
                int[] notFound = new int[]{-1,-1};
                if (len == 0) return notFound;

                int left = 0, right = len - 1;
                // 先排除target不在nums数组内的情况
                if (target >= nums[left] && target <= nums[right]) {
                        // 二分法查找
                        while (left <= right) {
                                int mid = left + (right - left) / 2;
                                if (target < nums[mid]) right = mid - 1;
                                else if (target > nums[mid]) left = mid + 1;
                                // 二分法找到target，下标等于mid
                                else {
                                        //向左右分别扩展等于target的值
                                        int i = mid, j = mid;
                                        while (i > 0 && nums[i] == target) i--;
                                        while (j < len - 1 && nums[j] == target) j++;
                                        // 跳出上面循环有两种情形：
                                        //1、找到不等于target的下标，这种i和j就是答案下标；
                                        //2、target在数组首位或末位，此时是因为到达边界而跳出循环（i多减了一，j多加了一），要分别处理i和j的值。
                                        if (nums[i] != target) i++;
                                        if (nums[j] != target) j--;
                                        return new int[]{i, j};
                                }
                        }
                }
                return notFound;
        }
}

