python
class Solution(object):
    def searchRange(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        #双指针的解法
        #i=0
        #j=len(nums)-1
        #while i<len(nums):       #首个与目标值相等的索引
            #if nums[i]!=target:
                #i+=1
            #else:
                #break
        #while j>=0:          #最后一个与目标值相等的索引
            #if nums[j]!=target:
                #j-=1
            #else:
                #break
        #if i==len(nums) or j==-1:    #如果超出索引范围，则没有找到此目标值
            #return [-1,-1]
        #else:
            #return [i,j]

        #二分法解法
        i=0
        j=len(nums)-1
        while i<=j:
            mid=(i+j)//2      #中间节点的位置
            if nums[mid]<target:            #若小于目标值，则左指针移到中间节点的后一位
                i=mid+1
            elif nums[mid]>target:         #若大于目标值，则右指针移到中间节点的前一位
                j=mid-1
            else:          #若等于目标值，则需要向前（后）索引到不等于目标值的位置
                pre=mid   #创建两个向前（后）的指针，初始位置为中间节点
                low=mid
                while pre>=0 and nums[pre]==target:       #向前第一个不等于目标值的位置
                    pre-=1
                while low<len(nums) and nums[low]==target:   #向后第一个不等于目标值的位置
                    low+=1
                return [pre+1,low-1]         
        return [-1,-1]





