
给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。

如果数组中不存在目标值 target，返回 [-1, -1]。

进阶：

你可以设计并实现时间复杂度为 O(log n) 的算法解决此问题吗？

 

示例 1：

输入：nums = [5,7,7,8,8,10], target = 8
输出：[3,4]

示例 2：

输入：nums = [5,7,7,8,8,10], target = 6
输出：[-1,-1]

示例 3：

输入：nums = [], target = 0
输出：[-1,-1]

 

提示：

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums 是一个非递减数组
-109 <= target <= 109



## 思路
-  这道题很容易想到使用二分查找，难点在于，不仅要找到这个值的下标，还要找起始下标和终结下标
- 其实单纯使用两个二分查找即可，一个找起始下标，一个找最终下标
## 关键点

-  O(logn)和O(2logn)是相等的，都是O(logn)的时间复杂度

## 代码

- 语言支持：Python3

Python3 Code:


python

class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        # 取起始下标
        left, right = 0, len(nums) - 1
        while left < right:
            mid = (left + right) // 2
            if nums[mid] >= target:
                right = mid
            else:
                left= mid + 1

        # 数组不存在或者目标值不在数组中
        if not nums or nums[left] != target:
            return [-1,-1]
        
        # 取结束下标
        a, b = left, len(nums) - 1
        while a < b:
            mid = (a + b + 1) // 2
            if nums[mid] <= target:
                a = mid
            else:
                b = mid - 1
        
        return [left,a]



