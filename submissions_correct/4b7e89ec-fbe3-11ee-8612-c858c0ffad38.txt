cpp
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int len = nums.size();
        //边界处理情况
        if(len == 0)
            return {-1, -1};
        //二分查找模板
        int left = 0, right = len - 1;
        int begin = -1 , end = -1;
        while(right >= left)
        {
            int mid = left + (right - left) / 2;
            if(nums[mid] > target)
                right = mid - 1;
            else
            {
                left = mid + 1;
            }
        }
        //使用二分查找找到nums[i]=target时最左侧的值的下标
        //如果数组用上了一定要判断是否大于0，因为数组下标不可能小于零
        if(right >=0 && nums[right] ==  target)
            {
                end = right;
                while(right >= 1 && nums[right] == nums[right - 1])
                    right--;
                begin = right;
            }
        return {begin, end};
    }
};

