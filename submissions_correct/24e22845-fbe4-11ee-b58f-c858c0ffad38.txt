cpp 
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        auto left=lower_bound(nums.begin(),nums.end(),target);
        auto right=upper_bound(nums.begin(),nums.end(),target);
        int  l,r;
        l= left==nums.end() ? -1 : (*left==target ? left-nums.begin() : -1);
        r= left==right ? -1 : (right-nums.begin()-1);
        return {l,r};
    }
};


实现二分查找


cpp
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        if(nums.empty() || *nums.begin()>target || *nums.rbegin()<target)
            return {-1,-1}; 
        int left=left_qsort(nums,target);
        int right=right_qsort(nums,target);
        return {left,right};
    }
    int left_qsort(vector<int>& nums,int target){
        int l=0,r=nums.size()-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(nums[mid]<target)
                l=mid+1;
            else
                r=mid-1;
        }
        return nums[l]==target ? l:-1;
    }
    int right_qsort(vector<int>& nums,int target){
        int l=0,r=nums.size()-1;
        while(l<=r){
            int mid=l+(r-l)/2;
            if(nums[mid]<=target)
                l=mid+1;
            else
                r=mid-1;
        }
        return nums[r]==target ? r:-1;
    }

};

