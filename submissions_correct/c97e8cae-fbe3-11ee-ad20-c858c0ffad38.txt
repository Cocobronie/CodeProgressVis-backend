java
class Solution {
    public static int[] searchRange(int[] nums, int target) {
        if (nums.length == 0) {
            return new int[]{-1, -1};
        }
        // 初始化，搜索区间为[left, right)
        int start = -1, end = -1;
        int lower= lower_binary_search(nums, target);

        // target比数组中所有的元素都大
        if (lower == nums.length) {
            return new int[]{start, end};
        }

        if (nums[lower] == target) {
            start = lower;
        }

        //System.out.println(start);
        int upper = upper_binary_search(nums, target);
        // target比数组中的所有元素都小
        if (upper < 0) {
            return new int[]{start, end};
        }

        if (nums[upper] == target) {
            end = upper;
        }

        System.out.println(end);

       return new int[]{start, end};
    }

    public static int lower_binary_search(int[] nums, int target) {
        // 一直向左搜索
        int left = 0, right = nums.length, mid;
        while (left < right) {
            mid = (left + right) / 2;
            if (nums[mid] == target) {
                right = mid;
            }else if (nums[mid] > target) {
                right = mid;
            }else if (nums[mid] < target) {
                left = mid + 1;
            }
        }
        return left;
    }

    public static int upper_binary_search(int[] nums, int target) {
        // 一直向右搜索
        int left = 0, right = nums.length, mid;
        while (left < right) {
            mid = (left + right) / 2;
            if (nums[mid] == target) {
                left = mid + 1;
            }else if (nums[mid] > target) {
                right = mid;
            }else if (nums[mid] < target) {
                left = mid + 1;
            }
        }
        return left - 1;
    }
}

