java
class Solution {
    public int[] searchRange(int[] nums, int target) {
        if(nums.length == 0 || nums == null){
            return new int[]{-1,-1};
        }
        int left = findLeft(nums,target);
        int right = findRight(nums, target);
        return new int[]{left,right};
    }
    private int findLeft(int[] nums, int target){
        if(nums[0] == target){
            return 0;
        }
        int left = 1, right = nums.length-1;
        while(left <= right){
            int mid = (right - left) / 2 + left;
            if(nums[mid] == target && nums[mid-1] != target){
                return mid;
            }
            if(nums[mid] >= target){
                right = mid - 1;
            }else{
                left = mid + 1;
            }
        }
        return -1;
    }
    private int findRight(int[] nums,int target){
        if(nums[nums.length-1] == target){
            return nums.length-1;
        }
        int left = 0,right = nums.length - 2;
        while(left <= right){
            int mid = (right - left)/2 + left;
            if(nums[mid] == target && nums[mid + 1] != target){
                return mid;
            }
           if(nums[mid] <= target){
               left = mid + 1;
           }else{
               right = mid - 1;
           }
        }
        return -1;
    }
}

