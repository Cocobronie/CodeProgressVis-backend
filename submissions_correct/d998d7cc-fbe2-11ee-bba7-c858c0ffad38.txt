
    //34
    public int[] searchRange(int[] nums, int target) {
        int left=-1, right=-1, n=nums.length;
        left = findLeft(nums,0,n-1, target);
        right = findRight(nums,0,n-1 ,target);
        return new int[]{left,right};
    }
    //下标尽量往左
    private int findLeft(int []nums, int l, int r, int target){
        int index = -1;
        int mid = -1;
        while (l <= r){
            mid = l+(r-l)/2;
            if (nums[mid] < target){ //当nums[mid] < target的时候下标才不得不往右
                l = mid+1;
            }else {
                r = mid-1;
            }
            if (nums[mid] == target) index = mid;
        }
        return index;
    }
    //下标尽量往右
    private int findRight(int []nums, int l, int r, int target){
        int index = -1;
        int mid = -1;
        while (l <= r){
            mid = l+(r-l)/2;
            if (nums[mid] > target){ //当nums[mid] > target的时候下标才不得不往左
                r = mid-1;
            }else {
                l = mid+1;
            }
            if (nums[mid] == target) index = mid;
        }
        return index;
    }

