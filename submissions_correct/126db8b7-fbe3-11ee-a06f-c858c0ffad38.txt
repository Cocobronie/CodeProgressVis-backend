python3 []
class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        #双向指针：求解
        # nums_len=len(nums)
        if len(nums)==0:
            return [-1,-1]
        start,end=0,len(nums)-1
        while start<=end:
            if nums[start]==target and nums[end]==target:
                return [start,end]
            if nums[start]<target:
                start+=1
            if nums[end]>target:
                end-=1

        return[-1,-1]




cpp []
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> res(2,-1);

        if(nums.size()==0){
            return res;
        }
        int start=0,end=nums.size()-1;
        while(start<=end){
            if(nums[start]==target &&nums[end]==target){
                res[0]=start;
                res[1]=end;
                return res;
            }
            if(nums[start]<target){
                start++;
            }
            if(nums[end]>target)
                end--;
        }
        return res;
    }
};


### 执行结果 python：
![image.png](https://pic.leetcode-cn.com/1619853123-JWGNGU-image.png)
### 执行结果c++:
![image.png](https://pic.leetcode-cn.com/1619853896-bfZUkD-image.png)
### 方法2:二分法求解（这个方法是看的大佬的，代码也是白嫖的大佬的，因为有些地方确实没理解）
关于二分法在看了大佬的思路之后学到了很多新的点，我以前只会使用这个方法去检索特定的值：
(1 在进行mid值求解的时候，我现在知道的方式一共有三种：
        (1) mid=(l+r)/2
        (2) mid=l+(r-l)/2
        (3) mid=l+r>>1 或l+((r-l)>>1)
(1)方式有一个很大的问题，就是有可能会造成数值溢出；（2）则避免了这种现象；（3）是位运算，速度比较快

(2 求解边界值（一个值的起点问题）
    整个查找的过程主要就是：mid值于目标值进行对比，mid>target则表示当前值大了，end=mid-1，我们将搜索的范围缩小到mid的左半区；mid<target时，表示当前值小了，start=mid+1，将搜索范围缩小到mid的右半区里面去寻找我们需要的target值。
搜索一个边界值的思想也是利用半区寻找的思想。
【1，2，3，3，4，5，7，7，9】
    当我们要寻找一个值的左边界时，我们可以将条件设置为 nums[mid]>=target；同时将满足时的操作改为：end=mid-1;(end=mid)    当nums[mid]<target时，表示不满足这个条件,start=mid+1;
    nums[mid]>=target时，让end=mid-1；这里我们并不是要返回target值的任意索引，而是为了返回它的最左侧的索引值。故而即使满足了条件，但是我们也无法确定这个值是不是我们想要的。已知，mid值已经满足了target了，那么后面的值就一定>=target了，那么我们要找的左边界索引肯定在mid的左半区中。end=mid-1;将范围缩减到左半区。（这里end=mid-1其实有可能导致target流失，因为如果mid就是边界值时，那么end=mid-1就会把target的边界值漏出去，但是也是可以求解的，这个方法）
    nums[mid]<target时，让start=mid+1;此时，mid前面所有的值都小于target了，不可能存在我们想要的边界值，所以，我们将start=mid+1,将返回放到mid的右区间中。

    在循环中，我们的判定条件就变成了while  (start<=end)  这里是有等于号的，因为如果不取到等于号的话，当start=end时的mid值就没有判断。
最终结果有两种情况：（1）给定的Nums中没有target值   （2）有nums值
（1）情况时，如果我们的nums[mid]>=target时的语句是  end=mid-1; 那么就应该有结果 nums[start]!=target
（2）情况时，如果我们的nums[mid]>=target时， end=mid-1;那么nums[start]=target，且这个start值就是我们要找的最终索引值。







**代码:**

cpp
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> res(2,-1);
        int n=nums.size();
        if(n==0) return res;
        int l=0,r=n-1;
        int mid;
        while(l<r){
            mid=l+r>>1;
            if(nums[mid]>=target){
                r=mid;
            }else l=mid+1;
        }
        if(nums[l]!=target) return res;
        res[0]=l;
        l=0,r=n-1;
        while(l<r){
            mid=l+r+1>>1;
            if(nums[mid]<=target) l=mid;
            else r=mid-1;
        }
        res[1]=r;
        return res;
 }
};

