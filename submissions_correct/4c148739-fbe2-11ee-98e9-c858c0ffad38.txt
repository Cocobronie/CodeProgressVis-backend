cpp
class Solution {

public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> d(2,-1);
        if(nums.size() ==0) {return d;}
        int l=0, r=nums.size()-1;
        while(l<r){
            int m = l + (r-l)/2;
            if(nums[m]>=target) r = m;
            else l = m+1;
        }
        // auto a = lower_bound(nums.begin(),nums.end(),target);

        vector<int> ans;
        if(nums[l] ==target){
        ans.push_back(l);
             for(int i = l+1;i<nums.size();i++){// 收集从下界到上界的index
            if(nums[i]==nums[l])
                ans.push_back(i);
        }
             if(ans.size()<=1){ // 处理{0}这种情况，返回{0,0}
            ans.push_back(ans.back());
        }
            if(ans.size()>2){ //处理{3,3,3}这种情况，返回{0,2}
                int a = ans.back();
                while(ans.size()>=2){
                ans.pop_back();
            }
            ans.push_back(a);
        }
        }
        else {ans.push_back(-1); //处理没有找到的情况
        ans.push_back(-1);
        }

        return ans;



    }
};

