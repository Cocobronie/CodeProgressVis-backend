python
def naive(a, t):
    indices = [i for i, v in enumerate(a) if v == t]
    return [indices[0], indices[-1]] if indices else [-1, -1]



# 单次二分查找+向前向后遍历

python
def single_bin_search(a, t):
    if not a:
        return [-1, -1]
    l, r = 0, len(a) - 1
    while l < r:
        mid = (l + r) >> 1 # or, equivalently, // 2
        if a[mid] < t: # t still on the right
            l = mid + 1
        else:
            r = mid
    # on exit, l == r
    if a[l] != t:
        return [-1, -1]
    while l > 1:
        if a[l - 1] == t:
            l -= 1
        else:
            break
    while r < len(a)-1:
        if a[r + 1] == t:
            r += 1
        else:
            break
    return [l, r]



# 两次二分：一次找左端，一次找右端

python
def double_bin_search(a, t):
    L, R = -1, -1
    if not a:
        return [L, R]
    # first look for the leftmost
    l, r = 0, len(a) - 1
    while l < r:
        mid = (l + r) >> 1
        if a[mid] < t:
            l = mid + 1
        else:
            r = mid
    if a[l] != t:
        return [-1, -1]
    L = l
    # then look for the rightmost
    r = len(a) - 1
    while l < r:
        mid = (l + r + 1) >> 1
        if a[mid] > t:
            r = mid - 1
        else:
            l = mid
    R = r
    return [L, R]



# 对接在线提交

python
class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        # return naive(nums, target)
        # return single_bin_search(nums, target)
        return double_bin_search(nums, target)

