
class Solution {
    public int[] searchRange(int[] nums, int target) {
    int resl = -1, resr = -1;
    int left = 0, right = nums.length - 1;
    if (nums.length == 0) {
            return new int[]{-1, -1};
    }
    //确定最左边的边界
    while (left < right) {
        int mid = left + (right - left) / 2;
        if (target > nums[mid]) {
            left = mid + 1;
        } else 
            right = mid;
    }
    // 未找到
    if (nums[left] != target) {
        return new int[]{-1, -1};
    }
    resl = left;
    left = 0;
    right = nums.length - 1;
    while(left < right) {
        int mid = left + (right - left + 1) /2; //注意这里要取上界，否则可能在数组长度为2时发生死循环
        if (target < nums[mid]) {
            right = mid - 1;
        } else {
            left = mid;
        }
    
    }
    resr = right;
    return new int[]{resl, resr};
    }
}

