cpp
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        if (nums.empty()) return vector<int>{-1, -1};
        int lower, upper;
        lower = lower_bound(nums, target);
        upper = upper_bound(nums, target) - 1;      //注意要减一
        if (lower == nums.size() || nums[lower] != target)
        {
            return vector<int>{-1, -1};
        }
        return vector<int>{lower, upper};
    }

    int lower_bound(vector<int>& nums, int target)
    {
        int mid = 0;
        int size = nums.size();
        int left = 0, right = size - 1;
        while(left <= right)
        {
            mid = left  + (right - left) / 2;
            if (nums[mid] < target)
            {
                left = mid + 1;
            }
            else
            {
                right = mid - 1;
            }
        }
        return left;
    }

    int upper_bound(vector<int>& nums, int target)
    {
        int mid = 0;
        int size = nums.size();
        int left = 0, right = size - 1;
        while(left <= right)
        {
            mid = left  + (right - left) / 2;
            if (nums[mid] <= target)
            {
                left = mid + 1;
            }
            else
            {
                right = mid - 1;
            }
        }
        return left;
    }
};

