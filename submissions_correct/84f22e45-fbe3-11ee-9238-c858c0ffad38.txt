
class Solution {
public:
    int binarySearch(vector<int>& nums, int target){
        int l = 0, r = nums.size() - 1;
        while(l < r){
            int mid =  (l + r) >> 1;
            if(nums[mid] >= target) r = mid;
            else l = mid + 1;
        }
        return l;
    } //二分查找，直接套模板
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> ans(2,-1);

        if(nums.size() == 0) return ans;

        int firstIndex = binarySearch(nums,target); //找target第一个位置
        int secondIndex = binarySearch(nums,target+1); //找第一个大于target的位置

        if(nums[firstIndex] == target) ans[0] = firstIndex;
        {
            if(secondIndex == firstIndex){ 
                if(nums[secondIndex] == target) ans[1] = secondIndex;
            }//当nums中没有大于target的值时
            else{
                if(nums[secondIndex] == target) ans[1] = secondIndex;
                else ans[1] = secondIndex - 1;
            }
        }//说明nums中存在target这个数
        return ans;
    }
};

