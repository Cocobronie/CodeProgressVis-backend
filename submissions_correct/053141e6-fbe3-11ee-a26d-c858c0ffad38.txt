java
class Solution {
    public int[] searchRange(int[] nums, int target) {
        if (nums.length == 0) return new int[] {-1, -1}; 	// 特殊情况
        int left = 0, right = nums.length;				// 左闭右开
        while (left < right) {							// 对应小于
            int mid = left + (right - left) / 2;		// 防止溢出
            if (target < nums[mid]) right = mid;		// 左闭右开
            else if (target > nums[mid]) left = mid + 1;// 左闭右开
            else {
                int ll = mid - 1, rr = mid + 1;			// 左右扩展
                while (ll >= 0 && target == nums[ll]) ll--; 		// 限制范围
                while (rr < nums.length && target == nums[rr]) rr++;// 防止溢出
                return new int[] {ll + 1, rr - 1};		// 回调返回
            } 
        }
        return new int[] {-1, -1};
    }
}



### 2. 直接寻找左右边界
直接通过二分查找定位到左边界或者右边界，这样加一个标志位判断是找左边界还是右边界即可，需要调用两次二分查找


java
class Solution {
    public int[] searchRange(int[] nums, int target) {
        if (nums.length == 0) return new int[] {-1, -1};
        int ll = binarySearch(nums, target, true);
        int rr = binarySearch(nums, target, false);
        return new int[] {ll, rr};
    }
    private int binarySearch(int[] nums, int target, boolean flag) {
        int left = 0, right = nums.length - 1;
        while(left <= right) { 										// 闭合区间
            int mid = left + (right - left) / 2; 					// 防止溢出
            if (nums[mid] < target) left = mid + 1; 				// 
            else if (nums[mid] > target) right = mid - 1; 			// 
            else if(flag && nums[mid] == target) right = mid - 1; 	// 找左边界，则更新右侧，最后返回left
            else left = mid + 1;									// 找右边界，则更新左侧，最后返回right
        }
        // 返回值
        if (flag) { // 找左侧边界应该返回有效的 left，因为最后一次循环必然 left==right，直到 right=mid-1
            if (left >= 0 && left < nums.length && nums[left] == target) return left;
            else return -1;
        }	
        else {		// 找右侧边界应该返回有效的 right，因为最后一次循环必然 left==right，直到 left=mid+1
            if (right >= 0 && right < nums.length && nums[right] == target) return right;
            else return -1;
        }
    }
}


优化下代码，将边界返回值的判断提到二分查找的外面，就是官方题解的样子


java
class Solution {
    public int[] searchRange(int[] nums, int target) {
        if (nums.length == 0) return new int[] {-1, -1};
        int ll = binarySearch(nums, target, true);  	// 左边界
        int rr = binarySearch(nums, target, false);		// 右边界
        if (ll <= rr && rr < nums.length && nums[ll] == target && nums[rr] == target) {
            return new int[]{ll, rr};
        } 
        return new int[] {-1, -1};
    }
    private int binarySearch(int[] nums, int target, boolean flag) {
        int left = 0, right = nums.length - 1;
        while(left <= right) { 						// 闭合区间
            int mid = left + (right - left) / 2; 	// 防止溢出
            if (nums[mid] < target) left = mid + 1; 
            else if (nums[mid] > target) right = mid - 1;
            else if(flag && nums[mid] == target) right = mid - 1; 	// 找左边界，则更新右侧，最后返回left
            else left = mid + 1;									// 找右边界，则更新左侧，最后返回right
        }
        return flag ? left : right; // 如果对应位置元素与target不相等应该返回 -1
    }
}


