java
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int[] rev = new int[]{-1, -1};
        rev[0] = findLeft(nums, target);
        if(rev[0] == -1){
            return rev;
        }
        rev[1] = findRight(nums, target);
        return rev;
    }

    private int findRight(int[] nums, int target) {
        int index = -1;
        int l = 0, r = nums.length - 1, mid;
        while (l <= r){
            mid = (l + r) / 2;
            if(nums[r] == target){
                return r;
            }
            if(target == nums[mid]){
                index = mid;
                l = mid + 1;
            } else if(target > nums[mid]){
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return index;
    }

    private int findLeft(int[] nums, int target) {
        int index = -1;
        int l = 0, r = nums.length - 1, mid;
        while (l <= r){
            mid = (l + r) / 2;
            if(nums[l] == target){
                return l;
            }
            if(target == nums[mid]){
                index = mid;
                r = mid - 1;
            } else if(target > nums[mid]){
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return index;
    }
}

