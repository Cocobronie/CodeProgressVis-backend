
int lower_bound(vector<int> &nums, int target) {
    int l = 0, r = nums.size(), mid;
    while (l < r) {
        mid = (l + r) / 2;
        if (nums[mid] >= target) {
            r = mid;
        } else {
            l = mid + 1;
        }
    }
    return l;
}//下边界为返回值

int upper_bound(vector<int> &nums, int target) {
    int l = 0, r = nums.size(), mid;
    while (l < r) {
        mid = (l + r) / 2;
        if (nums[mid] > target) {
            r = mid;
        } else {
            l = mid + 1;
        }
    }
    return l;
}//下边界为返回值-1



# 时间复杂度
    O(log(n))

# 空间复杂度
    O(log(n))

# 代码


cpp
class Solution {
public:
    vector<int> r={100000, 0};
    void find(int low, int high, int target, vector<int>& nums)
    {
        if(low>high) 
            return;
        int mid=(low+high)/2;
        if(nums[mid]<target)
        {
            find(mid+1, high, target, nums);
        }else if(nums[mid]>target)
        {
            find(low, mid-1, target, nums);
        }else
        {
            if(mid<r[0]) r[0]=mid;
            if(mid>r[1]) r[1]=mid;
            find(low, mid-1, target, nums);
            find(mid+1, high, target, nums);
        }
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        find(0, nums.size()-1, target, nums);
        if(r[0]>r[1])
        {
            r[0]=-1;
            r[1]=-1;
        }
        return r;
    }
};

