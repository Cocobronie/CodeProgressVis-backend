java
class Solution {
  	public int[] searchRange(int[] nums, int target) {

		// int leftIdx = binarySearch(nums, target, true);
		// int rightIdx = binarySearch(nums, target, false) - 1;

		int leftIdx = searchLeft(nums, target);
		int rightIdx = searchRight(nums, target);

		if (leftIdx <= rightIdx && rightIdx < nums.length && nums[leftIdx] == target && nums[rightIdx] == target) {
			return new int[] { leftIdx, rightIdx };
		}
		return new int[] { -1, -1 };

	}

	private int searchLeft(int[] nums, int target) {
		int l = 0, r = nums.length - 1, ans = nums.length;
		while(l <= r){
			int mid = (l+r)/2;
//先考虑nums[mid]==target时，应该移动右指针r = mid - 1; 当移动到左边界时，nums[mid] < target，此时自然而然能判断需要移动左指针了l = mid + 1;
			if(nums[mid] < target){
				l = mid + 1;
			}else{
				r = mid - 1;
				ans = mid;
			}
		}
		return ans;
	}

	private int searchRight(int[] nums, int target) {

		int l = 0, r = nums.length-1, ans = nums.length;
		while(l <= r){
			int mid = (l+r)/2;
			if(nums[mid] <= target){
				l = mid + 1;
			}else{
				r = mid - 1;
				ans = mid;
			}
		}
		return ans-1;
	}
}

