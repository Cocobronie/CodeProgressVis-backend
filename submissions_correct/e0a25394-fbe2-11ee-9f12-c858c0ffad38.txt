golang
func searchRange(nums []int, target int) []int {
	if len(nums) == 0 {
		return []int{-1,-1}
	}
	var index1  int
	var index2 int
	index1 = binarySearch(nums,target,true)
	index2 = binarySearch(nums,target,false)
	return []int{index1,index2}
}

func binarySearch(nums []int,target int,flag bool) int{
	res := -1
	left := 0
	right := len(nums)-1
	for ;left <= right; {
		mid := left + (right-left)/2
		if target < nums[mid] {
			right = mid-1
		}else if target > nums[mid] {
			left = mid+1
		}else {
			res = mid
			if flag { // flag == true,找左边界,当找左边界的时候让右边界=mid-1，则不会再进行下一次循环直接退出for
				right = mid -1
			} else { // flag == false ,找右边界，同上
				left = mid+1
			}
		}
	}
	return res
}

