
 /**
     * 34. 在排序数组中查找元素的第一个和最后一个位置
     *
     * 时间复杂度：O(logn)。
     * 空间复杂度：O(n)。
     *
     * https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/solution/34-zai-pai-xu-shu-zu-zhong-cha-zhao-yuan-5zut/
     * @param nums
     * @param target
     * @return
     */
    fun searchRange(nums: IntArray, target: Int): IntArray? {
        val res = intArrayOf(-1, -1)
        if (nums.isEmpty()) return res

        val l = lowerBound(nums, target)
        val r = upperBound(nums, target)
        if (l == r) return res

        res[0] = l
        res[1] = r - 1
        return res
    }

/**
     * 寻找数组中给定元素的下界
     *
     * @param nums
     * @param target
     * @return
     */
    fun lowerBound(nums: IntArray, target: Int): Int {
        var l = 0
        var r = nums.size
        while (l < r) {
            val m = l + (r - l) / 2
            if (nums[m] < target) {
                l = m + 1
            } else {
                r = m
            }
        }

        // 由于执行到最后 nums[l..r] 里一定存在插入元素的位置，并且退出循环的时候一定有 l == r 成立，因此直接返回 l 或者 r 均可。
        return l
    }

    /**
     * 寻找数组中给定元素的上界
     *
     * @param nums
     * @param target
     * @return
     */
    fun upperBound(nums: IntArray, target: Int): Int {
        var l = 0
        var r = nums.size
        while (l < r) {
            val m = l + (r - l) / 2
            if (nums[m] <= target) {
                l = m + 1
            } else {
                r = m
            }
        }

        // 由于执行到最后 nums[l..r] 里一定存在插入元素的位置，并且退出循环的时候一定有 l == r 成立，因此直接返回 l 或者 r 均可。
        return l
    }

