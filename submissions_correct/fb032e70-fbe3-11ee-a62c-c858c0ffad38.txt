c
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int BinarySearchLeft(int *nums, int numsSize, int target)
{
    int l = 0, r = numsSize;
    while (l < r) {
        int mid = l + (r - l) / 2;
        if (nums[mid] == target) {
            r = mid;
        } else if (nums[mid] > target) {
            r = mid;
        } else if (nums[mid] < target) {
            l = mid + 1;
        }
    }
    if (l == numsSize) {
        return -1;
    }
    return nums[l] == target ? l : -1;
}

int BinarySearchRight(int *nums, int numsSize, int target)
{
    int l = 0, r = numsSize;
    while (l < r) {
        int mid = l + (r - l) / 2;
        if (nums[mid] == target) {
            l = mid + 1;
        } else if (nums[mid] < target) {
            l = mid + 1;
        } else if (nums[mid] > target) {
            r = mid;
        }
    }
    if (l == 0) {
        return -1;
    }
    return nums[l - 1] == target ? l - 1 : -1;
}

int* searchRange(int* nums, int numsSize, int target, int* returnSize){
    int l = BinarySearchLeft(nums, numsSize, target);
    int r = BinarySearchRight(nums, numsSize, target);
    int *res = (int *)malloc(sizeof(int) * 2);
    *returnSize = 2;
    res[0] = l;
    res[1] = r;
    return res;
}

