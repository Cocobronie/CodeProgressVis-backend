java
class Solution {
    public int[] searchRange(int[] nums, int target) {
        //双指针遍历n/2的复杂度还是O(n);
        //使用二分法遍历

        int leftBound = searchLeftBound(nums, target, (nums.length-1));
        int rightBound = searchRightBound(nums, target, (nums.length-1) );
        return new int[]{leftBound,rightBound};
    }

    private int searchLeftBound(int[] nums,int target,int right){
        if (right<0) return -1;
        int left=0;
        int temp=Integer.MAX_VALUE;
        while(left<=right){
            int mid=left+((right-left)>>1);
            //刚刚好此时nums[mid]==target,就继续搜索左侧
            if (nums[mid]==target){
                temp=Math.min(mid,temp);
                right=mid-1;
            }
            //这个target在左侧
            else if (nums[mid]>target){
                right=mid-1;
            }
            else {
                left=mid+1;
            }
        }
        if (temp==Integer.MAX_VALUE) temp=-1;
        return temp;
    }

    private int searchRightBound(int[] nums,int target,int right){
        int left=0;
        int temp=-1;
        while(left<=right){
            int mid=left+((right-left)>>1);
            //刚刚好此时nums[mid]==target,就继续搜索左侧
            if (nums[mid]==target){
                temp=Math.max(mid,temp);
                left=mid+1;
            }
            //这个target在左侧
            else if (nums[mid]>target){
                right=mid-1;
            }
            else {
                left=mid+1;
            }
        }
        return temp;
    }
}

