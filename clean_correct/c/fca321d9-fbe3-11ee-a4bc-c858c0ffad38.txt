 mid = left + (right - left + 1) / 2; if (nums[mid] < target) { left = mid + 1; } else if (nums[mid] == target) { left = mid; } else { right = mid - 1; } } if (left >= numsSize) { return -1; } if (nums[left] == target) { return left; } return -1; } int FindLeft(int* nums, int numsSize, int left, int right, int target) { int mid = 0; while (left < right) { mid = left + (right - left) / 2; if (nums[mid] < target) { left = mid + 1; } else if (nums[mid] == target) { right = mid; } else { right = mid - 1; } } if (nums[left] == target) { return left; } return -1; } int* searchRange(int* nums, int numsSize, int target, int* returnSize) { int *res = (int*)malloc(sizeof(int) * 2); memset(res, 0, sizeof(int) * 2); *returnSize = 2; if (nums == NULL || numsSize == 0) { res[0] = -1; res[1] = -1; return res; } res[0] = FindLeft(nums, numsSize, 0, numsSize - 1, target); res[1] = Findright(nums, numsSize, 0, numsSize - 1, target); return res; } 