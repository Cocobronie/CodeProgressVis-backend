java class Solution { public int[] searchRange(int[] nums, int target) { if(nums.length == 0 || nums == null){ return new int[]{-1,-1}; } if(nums.length == 1){ if(nums[0] == target){ return new int[]{0,0}; }else{ return new int[]{-1,-1}; } } int left = 0,right = nums.length-1; left = findLeft(nums,target); right = findRight(nums,target); return new int[]{left,right}; } private int findLeft(int[] nums,int target){ int left = 0,right = nums.length-1; if(nums[0] == target){ return left; } while(left <= right){ int mid = left + (right-left)/2; if(nums[mid] == target && mid - 1 >= 0 && nums[mid-1] != target){ return mid; } if(nums[mid] < target){ left = mid + 1; if(left <= right && nums[left] == target){ return left; } } else{ right = mid - 1; } } return -1; } private int findRight(int[] nums,int target){ int left = 0,right = nums.length-1; if(nums[nums.length-1] == target){ return right; } while(left <= right){ int mid = left + (right-left)/2; if(nums[mid] == target && mid + 1 < nums.length-1 && nums[mid + 1] != target){ return mid; } if(nums[mid] > target){ right = mid - 1; if(mid - 1 >= 0 && nums[mid-1] == target){ return right; } }else{ left = mid + 1; } } return -1; } } 