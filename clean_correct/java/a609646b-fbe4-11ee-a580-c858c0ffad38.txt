java class Solution { public static int[] searchRange(int[] nums, int target) { int[] result = new int[2]; if (nums.length == 1) { if (nums[0] == target) { result[0] = 0; result[1] = 0; return result; } else { result[0] = -1; result[1] = -1; } } if (nums.length == 2) { if (nums[0] == nums[1] && nums[0] == target) { result[0] = 0; result[1] = 1; } else if (nums[0] == target && nums[1] != target) { result[0] = 0; result[1] = 0; } else if (nums[1] == target && nums[0] != target) { result[0] = 1; result[1] = 1; } else { result[0] = -1; result[1] = -1; } return result; } int left = 0; int right = nums.length - 1; result[0] = fun1(nums, left, right, target); result[1] = fun2(nums, left, right, nums.length, target); return result; } public static int fun1(int[] arr, int left, int right, int target) { while (left <= right) { int mid = left + (right - left) / 2; if (arr[mid] == target && (mid == 0 || arr[mid - 1] != target)) { return mid; } else if (arr[mid] < target) { left = mid + 1; } else { right = mid - 1; } } return -1; } public static int fun2(int[] arr, int left, int right, int length, int target) { while (left <= right) { int mid = left + (right - left) / 2; if (arr[mid] == target && (mid == length - 1 || arr[mid + 1] != target)) { return mid; } else if (arr[mid] > target) { right = mid - 1; } else { left = mid + 1; } } return -1; } } 