java class Solution { public int[] searchRange(int[] nums, int target) { int left = 0; int right = nums.length - 1; while (left <= right) { int mid = left + (right - left) / 2; if (nums[mid] == target) { left = leftBound(nums, target, left, mid); right = rightBound(nums, target, mid, right); return new int[] {left, right}; } else if (nums[mid] < target) { left = mid + 1; } else { right = mid - 1; } } return new int[] {-1, -1}; } public int leftBound(int[] nums, int target, int left, int right) { while (left <= right) { int mid = left + (right - left) / 2; if (nums[mid] == target) { right = mid - 1; } else if (nums[mid] < target) { left = mid + 1; } else { right = mid - 1; } } return left; } public int rightBound(int[] nums, int target, int left, int right) { while(left <= right) { int mid = left + (right - left) / 2; if (nums[mid] == target) { left = mid + 1; } else if (nums[mid] < target) { left = mid + 1; } else { right = mid - 1; } } return right; } } 