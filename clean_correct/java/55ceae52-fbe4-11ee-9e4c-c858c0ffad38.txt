java class Solution { public int[] searchRange(int[] nums, int target) { if(nums.length==0||nums==null||(nums.length==1&&nums[0]!=target)){ return new int[]{-1,-1}; } int lower=lower(nums,target); int upper=upper(nums,target)-1; if(lower<=upper){ return new int[]{lower,upper}; }else{ return new int[]{-1,-1}; } } public int lower(int[] nums, int target){ int l=0, r=nums.length-1, mid=0, ans=nums.length; while(l<=r){ mid=(l+r)/2; if(nums[mid]<target){ l=mid+1; }else{ r=mid-1; ans=mid; } } return ans; } public int upper(int[] nums, int target){ int l=0, r=nums.length-1, mid=0, ans=nums.length; while(l<=r){ mid=(l+r)/2; if(nums[mid]>target){ r=mid-1; ans=mid; }else{ l=mid+1; } } return ans; } } 