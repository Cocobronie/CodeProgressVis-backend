java class Solution { public int[] searchRange(int[] nums, int target) { if (nums.length==0){ return new int[]{-1,-1}; } if (nums.length==1){ return nums[0]==target ? new int[]{0,0} : new int[]{-1,-1} ; } int left = dichotomy( nums, target, true); int right = dichotomy( nums, target, false); return new int[]{left,right}; } public int dichotomy(int[] nums, int target, boolean flag){ int left = 0; int right = nums.length-1; while (left<=right){ int mid = left + (right-left)/2; if (target>nums[mid]){ left = mid + 1; }else if (target<nums[mid]){ right = mid - 1; }else if(target==nums[mid]){ if (flag){ right = mid - 1; }else { left = mid + 1; } } } if (flag){ if (left<0 || left>=nums.length || nums[left]!=target){ left = -1; } return left; }else { if (right<0 || right>=nums.length || nums[right]!=target){ right = -1; } return right; } } } 