java class Solution { public int[] searchRange(int[] nums, int target) { if (nums.length == 0) return new int[] {-1, -1}; int left = 0, right = nums.length; while (left < right) { int mid = left + (right - left) / 2; if (target < nums[mid]) right = mid; else if (target > nums[mid]) left = mid + 1; else { int ll = mid - 1, rr = mid + 1; while (ll >= 0 && target == nums[ll]) ll--; while (rr < nums.length && target == nums[rr]) rr++; return new int[] {ll + 1, rr - 1}; } } return new int[] {-1, -1}; } } ### 2. 直接寻找左右边界 直接通过二分查找定位到左边界或者右边界，这样加一个标志位判断是找左边界还是右边界即可，需要调用两次二分查找 java class Solution { public int[] searchRange(int[] nums, int target) { if (nums.length == 0) return new int[] {-1, -1}; int ll = binarySearch(nums, target, true); int rr = binarySearch(nums, target, false); return new int[] {ll, rr}; } private int binarySearch(int[] nums, int target, boolean flag) { int left = 0, right = nums.length - 1; while(left <= right) { int mid = left + (right - left) / 2; if (nums[mid] < target) left = mid + 1; else if (nums[mid] > target) right = mid - 1; else if(flag && nums[mid] == target) right = mid - 1; else left = mid + 1; } if (flag) { if (left >= 0 && left < nums.length && nums[left] == target) return left; else return -1; } else { if (right >= 0 && right < nums.length && nums[right] == target) return right; else return -1; } } } 优化下代码，将边界返回值的判断提到二分查找的外面，就是官方题解的样子 java class Solution { public int[] searchRange(int[] nums, int target) { if (nums.length == 0) return new int[] {-1, -1}; int ll = binarySearch(nums, target, true); int rr = binarySearch(nums, target, false); if (ll <= rr && rr < nums.length && nums[ll] == target && nums[rr] == target) { return new int[]{ll, rr}; } return new int[] {-1, -1}; } private int binarySearch(int[] nums, int target, boolean flag) { int left = 0, right = nums.length - 1; while(left <= right) { int mid = left + (right - left) / 2; if (nums[mid] < target) left = mid + 1; else if (nums[mid] > target) right = mid - 1; else if(flag && nums[mid] == target) right = mid - 1; else left = mid + 1; } return flag ? left : right; } } 