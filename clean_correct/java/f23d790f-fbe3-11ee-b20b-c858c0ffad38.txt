java class Solution { public int[] searchRange(int[] nums, int target) { int leftIdx = searchLeft(nums, target); int rightIdx = searchRight(nums, target); if (leftIdx <= rightIdx && rightIdx < nums.length && nums[leftIdx] == target && nums[rightIdx] == target) { return new int[] { leftIdx, rightIdx }; } return new int[] { -1, -1 }; } private int searchLeft(int[] nums, int target) { int l = 0, r = nums.length - 1, ans = nums.length; while(l <= r){ int mid = (l+r)/2; if(nums[mid] < target){ l = mid + 1; }else{ r = mid - 1; ans = mid; } } return ans; } private int searchRight(int[] nums, int target) { int l = 0, r = nums.length-1, ans = nums.length; while(l <= r){ int mid = (l+r)/2; if(nums[mid] <= target){ l = mid + 1; }else{ r = mid - 1; ans = mid; } } return ans-1; } } 