java class Solution { public int[] searchRange(int[] nums, int target) { int len = nums.length; if (len == 0) { return new int[]{-1, -1}; } int firstPosition = findFirstPosition(nums, target); if (firstPosition == -1) { return new int[]{-1, -1}; } int lastPosition = findLastPosition(nums, target); return new int[]{firstPosition, lastPosition}; } private int findFirstPosition(int[] nums, int target) { int left = 0; int right = nums.length - 1; while (left < right) { int mid = left + (right - left) / 2; if (nums[mid] < target) { left = mid + 1; } else { right = mid; } } if (nums[left] == target) { return left; } return -1; } private int findLastPosition(int[] nums, int target) { int left = 0; int right = nums.length - 1; while (left < right) { int mid = left + (right - left + 1) / 2; if (nums[mid] > target) { right = mid - 1; } else { left = mid; } } return left; } } 