cpp class Solution { public: int findFirstPosition(vector<int>& nums, int& target){ int left=0,right=nums.size()-1; if(nums.size()==0) return -1; while(left<right){ int mid=left+(right-left)/2; if(target>nums[mid]){ left=mid+1; }else if(target==nums[mid]){ right=mid; }else{ right=mid-1; } } if(nums[left]!=target) return -1; return left; } int findLastPosition(vector<int>& nums, int& target){ int left=0,right=nums.size()-1; if(nums.size()==0) return -1; while(left<right){ int mid=left+(right-left+1)/2; if(target>nums[mid]){ left=mid+1; }else if(target==nums[mid]){ left=mid; }else{ right=mid-1; } } if(nums[left]!=target) return -1; return left; } vector<int> searchRange(vector<int>& nums, int target) { if(nums.size()==0) return {-1,-1}; int left=findFirstPosition(nums,target); if(left==-1) return {-1,-1}; int right=findLastPosition(nums,target); return {left,right}; } }; 