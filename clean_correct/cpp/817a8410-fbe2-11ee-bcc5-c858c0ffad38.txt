cpp class Solution { public: int divide1(vector<int>&nums,int target){ int left = 0; int right = nums.size() - 1; int mid; int ans = -1; while(left<=right){ mid = (left + right) / 2; if(nums[mid] < target){ left = mid + 1; }else if(nums[mid] > target){ right = mid; }else{ ans = mid; right = mid - 1; } if(nums[mid]>target && left==right) break; } return ans; } int divide2(vector<int>&nums,int target){ int left = 0; int right = nums.size() - 1; int mid; int ans = -1; while(left<=right){ mid = (left + right) / 2; if(nums[mid] < target){ left = mid + 1; }else if(nums[mid] > target){ right = mid; }else{ ans = mid; left = mid + 1; } if(nums[mid]>target && left==right) break; } return ans; } vector<int> searchRange(vector<int>& nums, int target) { int left = divide1(nums,target); int right = divide2(nums,target); return {left,right}; } }; 