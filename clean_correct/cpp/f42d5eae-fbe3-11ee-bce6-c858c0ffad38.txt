cpp class Solution { public: int my_lower_bound(vector<int>& nums, int target){ int l =0 , r = nums.size(); while(l<r){ int mid = (l+r)>>1; if(nums[mid]>target){r = mid;} else if(nums[mid]<target){l = mid+1;} else{ r = mid; } } return l; } int my_upper_bound(vector<int>& nums, int target){ int l =0 , r = nums.size(); while(l<r){ int mid = (l+r)>>1; if(nums[mid]>target){r = mid;} else if(nums[mid]<=target){l = mid+1;} else{ r = mid; } } return l; } vector<int> searchRange(vector<int>& nums, int target) { if(nums.empty()) return vector<int>{-1,-1}; int idx1 = my_lower_bound(nums, target); if(idx1>= nums.size() || nums[idx1]!=target){ return vector<int>{-1,-1}; } int idx2 = my_upper_bound(nums, target); cout<<idx2<<endl; return vector<int>{idx1,idx2-1}; } }; 