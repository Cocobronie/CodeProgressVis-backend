cpp

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) 
    {
       vector<int> res(2,-1);
       int len=nums.size();
       if(len==0) return res;//特殊处理一下len=0的情况
       int left=0,right=len-1;
       //找>=target的最小值的 位置
       while(left<right)
       {
           int mid=(left+right)/2;  //当更新r=mid;l=mid+1时，mid要不用+1
           if(nums[mid]>=target) right=mid;
           else left=mid+1;
       }
       if(nums[left]==target)
       {
           res.clear();
           res.push_back(left);
       } 
       else return res;//nums中没有target值，直接返回【-1 -1】
       
       //找<=target的最大值的位置
       right=len-1;//重置一下right的位置，left不用动
       while(left<right)
       {
           int mid=(left+right+1)/2;  //挡更新r=mid-1;l=mid时，为了避免死循环，要+1
           if(nums[mid]<=target) left=mid;
           else right=mid-1;
       }
       res.push_back(right);
       
       return res;

    }
};

java
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int start = -1;
        int end = -1;
        for (int i = 0; i < nums.length; i++) {
            if (target == nums[i]) {
                if (start == -1) {
                    start = i;
                }
                end = i;

            }
            if (start != -1 && target < nums[i]) {
                return new int[]{start, end};
            }
        }
        return new int[]{start, end};
    }
}



