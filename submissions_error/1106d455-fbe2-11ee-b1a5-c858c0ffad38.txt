class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        //情况一：数组长度=0
        if(nums.size()==0){
            return {-1,-1};
        }
        //情况二：target没出现
        int first = getFirst(nums,target);
        if(first==-1){
            return {-1,-1};
        }
        //情况三：target出现
        int last = getLast(nums,target);
        return {first,last};
    }

    int getFirst(vector<int>& nums, int target) {   //寻找第一个target下标
        int l=0;
        int r=nums.size();
        int mid;
        while(l<=r){
            mid=(l+r)/2;
            if(target>nums[mid]){   
                l = mid+1;
            }else if(target<nums[mid]){
                r = mid;
            }else{          
                r = mid;
            }
            if(nums[l]==target)
                return l;
        }
        return -1;
    }

     int getLast(vector<int>& nums, int target) {
        int l=0;
        int r=nums.size()-1;
        int mid;
        while(l<r){
            mid=(l+r)/2;          
            if(target>nums[mid]){
                l = mid+1;
            }else if(target<nums[mid]){
                r = mid-1;
            }else{     
                l = mid;
            }
        }
        return l;
    }
};
C++

